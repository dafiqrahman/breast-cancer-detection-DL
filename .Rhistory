set.seed(123)
# Jumlah observasi yang diinginkan
n <- 139
# Simulasi data ARIMA(1,1,2)
arima_112 <- arima.sim(n = n, list(order = c(1, 1, 2), ar = 0.5, ma = c(0.4, 0.3)), sd = 1)
# Simpan data ke file CSV
write.csv(arima_112, file = "arima112_2_simulation.csv", row.names = FALSE)
data("AirPassengers")
y <- data("AirPassengers")
y
y <- data(AirPassengers)
y
View(y)
data
y <- data(AirPassengers)
y
data
View(data)
data
library(forecast)
data("AirPassengers")
AirPassengers
len(AirPassengers)
length(AirPassengers)
AirPassengers
t <- 1:length(AirPassengers)
t
lm(AirPassengers~t)
summary(model)
model <- lm(AirPassengers~t)
summary(model)
plot(t,y,type="o", xlab="monthly, 1949‐1960", ylab="Air Passengers")
plot(t,AirPassengers,type="o", xlab="monthly, 1949‐1960", ylab="Air Passengers")
abline(model)
plot(t,AirPassengers,type="o", xlab="monthly, 1949‐1960", ylab="Air Passengers")
abline(model)
HoltWinters(AirPassengers,beta = F, gamma = F)
plot(HoltWinters())
model <- HoltWinters(AirPassengers,beta = F, gamma = F)
plot(model)
train <- AirPassengers[:-10]
train <- AirPassengers[:-20]
train <- AirPassengers[,:-20]
train <- AirPassengers[,:20]
train <- AirPassengers[2]
train <- AirPassengers[:20]
train <- AirPassenger[1:142,]
train <- AirPassengers[1:142,]
train <- AirPassengers[1:142]
train
test <- AirPassegners[143:]
test <- AirPassegners[138:142]
test <- AirPassengers[138:142]
test
train
test
model <- HoltWinters(train)
train
ts(train)
model <- HoltWinters(ts(train))
model <- HoltWinters(ts(train),alpha = T,beta= F,gamma = F)
plot(model)
train <- AirPassengers[1:138]
model <- HoltWinters(ts(train),alpha = T,beta= F,gamma = F)
model <- HoltWinters(ts(train),beta= F,gamma = F)
plot(model)
forecast(model,6)
forecast(model,6)$"Point Forecast"
forecast(model,6)[1]
forecast(model,6)
forecast(model,6)$df
forecast(model,6)
prediksi <- forecast(model,6)
prediksi
prediksi[0]
prediksi[1]
prediksi[2]
prediksi[3]
prediksi[4]
prediksi[4][0]
prediksi[4]$mean
prediksi[4]$mean - test
prediksi <- predict(model,6)
prediksi
prediksi[1]
prediksi-test
prediksi-test[:,]
prediksi-test[,]
prediksi-test[]
prediksi-test
sum(prediksi-test)
sum(prediksi-test)[1]
plot(model,prediksi)
prediksi
model <- HoltWinters(train,gamma = F)
plot(model)
data("uspop")
uspop
plot(uspop)
uspop
length(uspop)
train <- uspop[1:16]
test <- uspop[17:19]
test
train
model <- HoltWinters(train,gamma = F)
plot(model)
model$SSE
model$SSE / 16
plot(model)
prediksi <- predict(model,5)
plot(prediksi)
plot(model.prediksi)
plot(model,prediksi)
AirPassengers
plot(AirPassengers)
train <- AirPassengers[1:132]
test <- AirPassengers[132:144]
model <- HoltWinters(ts(train),beta= F,gamma = F)
plot(model)
prediksi <- predict(model,6)
plot(model,prediksi)
model <- HoltWinters(ts(train),seasonal = 12)
model <- HoltWinters(ts(train))
model <- HoltWinters(AirPassengers)
train <- AirPassengers[1:132]
ts(train,frequency = 12)
test <- AirPassengers[132:144]
model <- HoltWinters(AirPassengers)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
train <- ts(train,frequency = 12)
model <- HoltWinters(train)
train <- AirPassengers[1:132]
train
train <- ts(train,frequency = 12)
train
test <- AirPassengers[132:144]
model <- HoltWinters(train)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
train <- AirPassengers[1:138]
train <- ts(AirPassengers,frequency = 12)
test <- ts(AirPassengers,frequency)
test <- ts(AirPassengers,frequency = 12)
test
train <- ts(train,frequency = 12)
test <- AirPassengers[138:144]
test <- ts(test,frequency = 12)
test
train <- AirPassengers[1:132]
train <- ts(train,frequency = 12)
test <- AirPassengers[132:144]
test <- ts(test,frequency = 12)
test
length(AirPassengers)
test <- ts(test,frequency = 12)
test
test <- AirPassengers[133:144]
test <- ts(test,frequency = 12)
test
train
t <- 1:length(train)
model <- lm(train~t)
summary(model)
t_test <- c(133:144)
t_test
model
y_pred_trend <- 92.005 + 2.564*t_test
y_pred_trend
plot(y_pred_trend,test)
calculate_mape <- function(actual, forecast) {
mape <- mean(abs((actual - forecast) / actual)) * 100
return(mape)
}
calculate_mape(test,y_pred_trend)
model <- HoltWinters(train,beta= F,gamma = F)
plot(model)
calculate_mape(test,prediksi)
prediksi
prediksi - test
prediksi
c(prediksi)
calculate_mape(test,c(prediksi)
calculate_mape(test,c(prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,gamma = F)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,gamma = F)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,beta= 0,gamma = 0)
plot(model)
prediksi <- predict(model,12)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,beta= 0,gamma = 0)
plot(model)
model <- HoltWinters(train,beta= F,gamma = F)
plot(model)
prediksi <- predict(model,12)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,beta= F,gamma = F)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
model <- HoltWinters(train,beta= 0,gamma = 0)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model
model <- HoltWinters(train,beta= 0,gamma = 0)
model
model <- HoltWinters(train,beta= F,gamma = F)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,gamma = F)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,gamma = F)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train,seasonal = "multiplicative")
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
model <- HoltWinters(train)
plot(model)
prediksi <- predict(model,12)
model <- HoltWinters(train)
plot(model)
prediksi <- predict(model,12)
plot(model,prediksi)
calculate_mape(test,c(prediksi))
install.packages("mlbench")
install.packages("mlbench")
install.packages("neuralnet")
install.packages("caret")
library(mlbench)
library(neuralnet)
library(caret)
library(caret)
library(mlbench)
library(neuralnet)
library(caret)
library(mlbench)
library(neuralnet)
library(caret)
data(BreastCancer)
bc <- BreastCancer
BC
bc
setwd("E:/study/breast cancer detection/notebook")
setwd("E:/study/breast cancer detection")
bc <- read.csv('dataset/data.csv')
bc
str(bc)
summary(bc)
str(bc)
summary(bc)
summary(bc)
stat_summary <- data.frame(
Feature = names(bc),
Mean = mean_vals,
Median = median_vals,
SD = sd_vals
)
bc
mean_vals <- sapply(bc, mean)
median_vals <- sapply(bc, median)
mean_vals <- sapply(bc, mean)
mean_vals <- sapply(bc, mean)
sd_vals <- sapply(bc, sd)
stat_summary <- data.frame(
Feature = names(bc),
Mean = mean_vals,
Median = median_vals,
SD = sd_vals
)
print(stat_summary)
bc <- read.csv('dataset/data.csv')
bc
bc$diagnosis <- factor(bc$diagnosis, levels = c("benign", "malignant"))
# Menghitung distribusi kelas
class_distribution <- table(bc$diagnosis)
# Membuat pie chart
pie(class_distribution, main = "Distribusi Kelas Kanker Payudara",
col = c("skyblue", "pink"), labels = c("Benign", "Malignant"))
bc <- read.csv('dataset/data.csv')
# Menghitung distribusi kelas
class_distribution <- table(bc$diagnosis)
# Membuat pie chart
pie(class_distribution, main = "Distribusi Kelas Kanker Payudara",
col = c("skyblue", "pink"), labels = c("Benign", "Malignant"))
# Menghitung distribusi kelas
class_distribution <- as.data.frame(table(bc$Class))
# Membuat pie chart dengan ggplot2
ggplot(class_distribution, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
theme_void() +
labs(title = "Distribusi Kelas Kanker Payudara", fill = "Kelas") +
scale_fill_manual(values = c("skyblue", "pink"))
# Menghitung distribusi kelas
class_distribution <- table(bc$diagnosis)
# Menghitung persentase
class_percentage <- round(100 * class_distribution / sum(class_distribution), 1)
# Membuat label dengan persentase
labels <- paste(names(class_distribution), "\n", class_percentage, "%", sep = "")
# Membuat pie chart
pie(class_distribution, main = "Distribusi Kelas Kanker Payudara",
col = c("skyblue", "pink"), labels = labels)
bc$diagnosis <- ifelse(bc$diagnosis == "M", 1, 0)
bc$diagnosis <- as.factor(bc$diagnosis)
bc
# Normalisasi data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
bc
bc[2:,]
bc[,2:]
bc[,2:-1]
bc[,2:33]
ncol(bc)
bc[,2:33]
bc[,3:33]
bc[, 1:9] <- as.data.frame(lapply(bc[, 1:9], normalize))
bc[, 3:33] <- as.data.frame(lapply(bc[, 1:9], normalize))
bc[, 3:33] <- as.data.frame(lapply(bc[, 3:33], normalize))
bc
set.seed(123) # Untuk reproducibility
trainIndex <- createDataPartition(bc$diagnosis, p = .8, list = FALSE)
trainData <- bc[trainIndex,]
testData <- bc[-trainIndex,]
bc
trainData
formula <- as.formula(paste("Class ~", paste(names(bc)[3:33], collapse = " + ")))
set.seed(123)
nn <- neuralnet(formula, data = trainData, hidden = c(5, 3), linear.output = FALSE)
formula <- as.formula(paste("diagnosis ~", paste(names(bc)[3:33], collapse = " + ")))
set.seed(123)
nn <- neuralnet(formula, data = trainData, hidden = c(5, 3), linear.output = FALSE)
names(bc)[3:33]
bc[,33]
bc <- read.csv('dataset/data.csv')
bc
bc[33]
bc <- bc[,2:32]
bc
bc$diagnosis <- factor(bc$diagnosis, levels = c("benign", "malignant"))
bc <- read.csv('dataset/data.csv')
bc <- bc[,2:32]
bc
# Menghitung distribusi kelas
class_distribution <- table(bc$diagnosis)
# Menghitung persentase
class_percentage <- round(100 * class_distribution / sum(class_distribution), 1)
# Membuat label dengan persentase
labels <- paste(names(class_distribution), "\n", class_percentage, "%", sep = "")
# Membuat pie chart
pie(class_distribution, main = "Distribusi Kelas Kanker Payudara",
col = c("skyblue", "pink"), labels = labels)
bc$diagnosis <- ifelse(bc$diagnosis == "M", 1, 0)
bc$diagnosis <- as.factor(bc$diagnosis)
# Normalisasi data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
bc[, 2:32] <- as.data.frame(lapply(bc[, 2:32], normalize))
bc
bc[, 2:31] <- as.data.frame(lapply(bc[, 2:31], normalize))
bc
set.seed(123) # Untuk reproducibility
trainIndex <- createDataPartition(bc$diagnosis, p = .8, list = FALSE)
trainData <- bc[trainIndex,]
testData <- bc[-trainIndex,]
formula <- as.formula(paste("diagnosis ~", paste(names(bc)[2:31], collapse = " + ")))
set.seed(123)
nn <- neuralnet(formula, data = trainData, hidden = c(5, 3), linear.output = FALSE)
nn.results <- compute(nn, testData[,2:31])
results <- data.frame(actual = testData$diagnosis, prediction = nn.results$net.result)
results
# Mengonversi hasil prediksi menjadi binary
results$prediction <- ifelse(results$prediction > 0.5, 1, 0)
# Mengonversi hasil prediksi menjadi binary
results$prediction <- ifelse(results$prediction.2 > 0.5, 1, 0)
results$prediction <- as.factor(results$prediction)
results
confusionMatrix(results$prediction, testData$diagnosis)
plot(nn)
confusionMatrix(results$prediction, testData$diagnosis,positive = "1")
# Membuat Classification Report
precision <- conf_mat$byClass['Pos Pred Value']
conf_mat <- confusionMatrix(results$prediction, testData$diagnosis,positive = "1")
print(conf_mat)
# Membuat Classification Report
precision <- conf_mat$byClass['Pos Pred Value']
recall <- conf_mat$byClass['Sensitivity']
f1_score <- 2 * ((precision * recall) / (precision + recall))
accuracy <- conf_mat$overall['Accuracy']
classification_report <- data.frame(
Metric = c("Precision", "Recall", "F1 Score", "Accuracy"),
Value = c(precision, recall, f1_score, accuracy)
)
print(classification_report)
# Menyusun data untuk plot confusion matrix
cm_table <- as.table(conf_mat$table)
cm_df <- as.data.frame(cm_table)
# Membuat plot confusion matrix
ggplot(data = cm_df, aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
geom_text(aes(label = Freq), vjust = 1) +
labs(title = "Confusion Matrix", x = "Actual", y = "Predicted") +
theme_minimal()
bc
formula <- as.formula(paste("diagnosis ~", paste(names(bc)[2:31], collapse = " + ")))
set.seed(123)
nn <- neuralnet(formula, data = trainData, hidden = c(32, 8), linear.output = FALSE)
nn.results <- compute(nn, testData[,2:31])
results <- data.frame(actual = testData$diagnosis, prediction = nn.results$net.result)
results
# Mengonversi hasil prediksi menjadi binary
results$prediction <- ifelse(results$prediction.2 > 0.5, 1, 0)
results$prediction <- as.factor(results$prediction)
results
conf_mat <- confusionMatrix(results$prediction, testData$diagnosis,positive = "1")
print(conf_mat)
plot(nn)
# Membuat Classification Report
precision <- conf_mat$byClass['Pos Pred Value']
recall <- conf_mat$byClass['Sensitivity']
f1_score <- 2 * ((precision * recall) / (precision + recall))
accuracy <- conf_mat$overall['Accuracy']
classification_report <- data.frame(
Metric = c("Precision", "Recall", "F1 Score", "Accuracy"),
Value = c(precision, recall, f1_score, accuracy)
)
print(classification_report)
# Menyusun data untuk plot confusion matrix
cm_table <- as.table(conf_mat$table)
cm_df <- as.data.frame(cm_table)
# Membuat plot confusion matrix
ggplot(data = cm_df, aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
geom_text(aes(label = Freq), vjust = 1) +
labs(title = "Confusion Matrix", x = "Actual", y = "Predicted") +
theme_minimal()
# Memisahkan fitur dan label
x_train <- as.matrix(trainData[, 2:31])
y_train <- as.matrix(trainData$diagnosis)
x_test <- as.matrix(testData[, 2:31])
y_test <- as.matrix(testData$diagnosis)
# Membangun model
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(30)) %>%
layer_dense(units = 8, activation = 'relu') %>%
layer_dense(units = 1, activation = 'sigmoid')
install.packages("keras")
library(magrittr)
library(keras)
library(mlbench)
library(neuralnet)
library(caret)
# Membangun model
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(30)) %>%
layer_dense(units = 8, activation = 'relu') %>%
layer_dense(units = 1, activation = 'sigmoid')
# Membangun model
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = 'relu', input_shape = c(30)) %>%
layer_dense(units = 8, activation = 'relu') %>%
layer_dense(units = 1, activation = 'sigmoid')
set.seed(123) # Untuk reproducibility
trainIndex <- createDataPartition(bc$diagnosis, p = .8, list = FALSE)
trainData <- bc[trainIndex,]
testData <- bc[-trainIndex,]
formula <- as.formula(paste("diagnosis ~", paste(names(bc)[2:31], collapse = " + ")))
set.seed(123)
nn <- neuralnet(formula, data = trainData, hidden = c(32, 8), linear.output = FALSE)
nn.results <- compute(nn, testData[,2:31])
nn.results
nn
bc <- read.csv('dataset/data.csv')
bc <- bc[,2:32]
bc <- read.csv('dataset/data.csv')
bc <- bc[,2:32]
head(bc)
head(results)
